'use client'

import { useState, useEffect } from 'react'
import { sendNotification } from './actions'

export default function Home() {
  const [isSupported, setIsSupported] = useState(false)
  const [subscription, setSubscription] = useState(null)
  const [message, setMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [status, setStatus] = useState('')

  useEffect(() => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      setIsSupported(true)
      registerServiceWorker()
      loadSubscriptionFromStorage()
    }
  }, [])

  const registerServiceWorker = async () => {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/',
        updateViaCache: 'none',
      })
      console.log('‚úÖ Service Worker registado:', registration)
    } catch (error) {
      console.error('‚ùå Erro ao registar Service Worker:', error)
    }
  }

  // Carregar subscri√ß√£o do localStorage
  const loadSubscriptionFromStorage = () => {
    try {
      const saved = localStorage.getItem('pushSubscription')
      if (saved) {
        const parsedSub = JSON.parse(saved)
        setSubscription(parsedSub)
        console.log('üì± Subscri√ß√£o carregada do localStorage')
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar subscri√ß√£o:', error)
    }
  }

  // Guardar subscri√ß√£o no localStorage
  const saveSubscriptionToStorage = (sub) => {
    try {
      localStorage.setItem('pushSubscription', JSON.stringify(sub))
      console.log('üíæ Subscri√ß√£o guardada no localStorage')
    } catch (error) {
      console.error('‚ùå Erro ao guardar subscri√ß√£o:', error)
    }
  }

  // Remover subscri√ß√£o do localStorage
  const removeSubscriptionFromStorage = () => {
    try {
      localStorage.removeItem('pushSubscription')
      console.log('üóëÔ∏è Subscri√ß√£o removida do localStorage')
    } catch (error) {
      console.error('‚ùå Erro ao remover subscri√ß√£o:', error)
    }
  }

  const subscribeToPush = async () => {
    setIsLoading(true)
    setStatus('A subscrever...')
    
    try {
      const registration = await navigator.serviceWorker.ready
      
      // Pedir permiss√£o
      const permission = await Notification.requestPermission()
      if (permission !== 'granted') {
        throw new Error('Permiss√£o para notifica√ß√µes negada')
      }

      // Criar subscri√ß√£o
      const sub = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY,
      })

      setSubscription(sub)
      saveSubscriptionToStorage(sub)
      setStatus('‚úÖ Subscrito com sucesso!')
      
      console.log('üîî Nova subscri√ß√£o criada:', sub)
      
    } catch (error) {
      console.error('‚ùå Erro ao subscrever:', error)
      setStatus(`‚ùå Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
    } finally {
      setIsLoading(false)
    }
  }

  const unsubscribeFromPush = async () => {
    if (!subscription) return

    setIsLoading(true)
    setStatus('A cancelar subscri√ß√£o...')
    
    try {
      await subscription.unsubscribe()
      setSubscription(null)
      removeSubscriptionFromStorage()
      setStatus('‚úÖ Subscri√ß√£o cancelada!')
      
      console.log('üîï Subscri√ß√£o cancelada')
      
    } catch (error) {
      console.error('‚ùå Erro ao cancelar subscri√ß√£o:', error)
      setStatus(`‚ùå Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
    } finally {
      setIsLoading(false)
    }
  }

  const sendTestNotification = async () => {
    if (!subscription) {
      setStatus('‚ùå Nenhuma subscri√ß√£o ativa!')
      return
    }

    if (!message.trim()) {
      setStatus('‚ùå Escreve uma mensagem!')
      return
    }

    setIsLoading(true)
    setStatus('A enviar notifica√ß√£o...')
    
    try {
      const result = await sendNotification(subscription, message)
      
      if (result.success) {
        setStatus('‚úÖ Notifica√ß√£o enviada!')
        setMessage('')
      } else {
        setStatus(`‚ùå Erro: ${result.error}`)
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error)
      setStatus(`‚ùå Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
    } finally {
      setIsLoading(false)
    }
  }

  if (!isSupported) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-red-50">
        <div className="text-center p-8">
          <h1 className="text-2xl font-bold text-red-600 mb-4">
            ‚ùå Push Notifications n√£o suportadas
          </h1>
          <p className="text-red-500">
            O teu browser n√£o suporta push notifications ou n√£o est√°s em HTTPS.
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <div className="max-w-md mx-auto pt-8">
        <div className="bg-white rounded-2xl shadow-xl p-6">
          <h1 className="text-2xl font-bold text-center mb-6 text-gray-800">
            üîî PWA Push Notifications
          </h1>

          {/* Estado da subscri√ß√£o */}
          <div className="mb-6 p-4 rounded-lg bg-gray-50">
            <h3 className="font-semibold mb-2">Estado:</h3>
            <p className={`text-sm ${subscription ? 'text-green-600' : 'text-orange-600'}`}>
              {subscription ? '‚úÖ Subscrito √†s notifica√ß√µes' : '‚ö†Ô∏è N√£o subscrito'}
            </p>
          </div>

          {/* Bot√µes de subscri√ß√£o */}
          <div className="space-y-3 mb-6">
            {!subscription ? (
              <button
                onClick={subscribeToPush}
                disabled={isLoading}
                className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 
                         text-white font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                {isLoading ? '‚è≥ A subscrever...' : 'üîî Subscrever Notifica√ß√µes'}
              </button>
            ) : (
              <button
                onClick={unsubscribeFromPush}
                disabled={isLoading}
                className="w-full bg-red-600 hover:bg-red-700 disabled:bg-red-300 
                         text-white font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                {isLoading ? '‚è≥ A cancelar...' : 'üîï Cancelar Notifica√ß√µes'}
              </button>
            )}
          </div>

          {/* Enviar notifica√ß√£o teste */}
          {subscription && (
            <div className="space-y-3">
              <h3 className="font-semibold text-gray-700">Testar Notifica√ß√£o:</h3>
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Escreve a tua mensagem..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 
                         focus:ring-blue-500 focus:border-transparent"
                disabled={isLoading}
              />
              <button
                onClick={sendTestNotification}
                disabled={isLoading || !message.trim()}
                className="w-full bg-green-600 hover:bg-green-700 disabled:bg-green-300 
                         text-white font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                {isLoading ? '‚è≥ A enviar...' : 'üì§ Enviar Notifica√ß√£o Teste'}
              </button>
            </div>
          )}

          {/* Status */}
          {status && (
            <div className="mt-4 p-3 rounded-lg bg-gray-100">
              <p className="text-sm text-gray-700">{status}</p>
            </div>
          )}

          {/* Instru√ß√µes */}
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-800 mb-2">üí° Como usar:</h4>
            <ol className="text-sm text-blue-700 space-y-1">
              <li>1. Clica "Subscrever Notifica√ß√µes"</li>
              <li>2. Aceita as permiss√µes do browser</li>
              <li>3. Escreve uma mensagem de teste</li>
              <li>4. Clica "Enviar Notifica√ß√£o Teste"</li>
              <li>5. V√™ a notifica√ß√£o aparecer! üéâ</li>
            </ol>
          </div>
        </div>
      </div>
    </div>
  )
}